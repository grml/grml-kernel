From: Ben Hutchings <ben@decadent.org.uk>
Subject: firmware_class: Log every success and failure against given device
Date: Sun, 09 Dec 2012 16:02:00 +0000

The hundreds of users of request_firmware() have nearly as many
different log formats for reporting failures.  They also have only the
vaguest hint as to what went wrong; only firmware_class really knows
that.  Therefore, add specific log messages for the failure modes that
aren't currently logged.

In case of a driver that tries multiple names, this may result in the
impression that it failed to initialise.  Therefore, also log successes.

Change existing log messages to consistently use the given device, not
the temporary child device we create.

This makes many error messages in drivers redundant, which will be
removed in later patches.

--- a/drivers/base/firmware_class.c
+++ b/drivers/base/firmware_class.c
@@ -255,7 +255,8 @@ static ssize_t firmware_loading_store(st
 						 fw_priv->nr_pages,
 						 0, PAGE_KERNEL_RO);
 			if (!fw_priv->fw->data) {
-				dev_err(dev, "%s: vmap() failed\n", __func__);
+				dev_err(dev->parent, "%s: vmap() failed\n",
+					__func__);
 				goto err;
 			}
 			/* Pages are now owned by 'struct firmware' */
@@ -270,9 +271,14 @@ static ssize_t firmware_loading_store(st
 		}
 		/* fallthrough */
 	default:
-		dev_err(dev, "%s: unexpected value (%d)\n", __func__, loading);
-		/* fallthrough */
+		dev_err(dev->parent, "%s: unexpected value (%d)\n",
+			__func__, loading);
+		goto err;
 	case -1:
+		dev_err(dev->parent,
+			"firmware: agent aborted loading %s (not found?)\n",
+			fw_priv->fw_id);
+		/* fallthrough */
 	err:
 		fw_load_abort(fw_priv);
 		break;
@@ -435,6 +441,9 @@ static void firmware_class_timeout(u_lon
 {
 	struct firmware_priv *fw_priv = (struct firmware_priv *) data;
 
+	dev_err(fw_priv->dev.parent,
+		"firmware: agent did not handle request for %s\n",
+		fw_priv->fw_id);
 	fw_load_abort(fw_priv);
 }
 
@@ -486,7 +495,8 @@ _request_firmware_prepare(const struct f
 	}
 
 	if (fw_get_builtin_firmware(firmware, name)) {
-		dev_dbg(device, "firmware: using built-in firmware %s\n", name);
+		dev_info(device, "firmware: using built-in firmware %s\n",
+			 name);
 		return NULL;
 	}
 
@@ -517,25 +527,29 @@ static int _request_firmware_load(struct
 
 	retval = device_add(f_dev);
 	if (retval) {
-		dev_err(f_dev, "%s: device_register failed\n", __func__);
+		dev_err(f_dev->parent, "%s: device_register failed\n",
+			__func__);
 		goto err_put_dev;
 	}
 
 	retval = device_create_bin_file(f_dev, &firmware_attr_data);
 	if (retval) {
-		dev_err(f_dev, "%s: sysfs_create_bin_file failed\n", __func__);
+		dev_err(f_dev->parent, "%s: sysfs_create_bin_file failed\n",
+			__func__);
 		goto err_del_dev;
 	}
 
 	retval = device_create_file(f_dev, &dev_attr_loading);
 	if (retval) {
-		dev_err(f_dev, "%s: device_create_file failed\n", __func__);
+		dev_err(f_dev->parent, "%s: device_create_file failed\n",
+			__func__);
 		goto err_del_bin_attr;
 	}
 
 	if (uevent) {
 		dev_set_uevent_suppress(f_dev, false);
-		dev_dbg(f_dev, "firmware: requesting %s\n", fw_priv->fw_id);
+		dev_dbg(f_dev->parent, "firmware: requesting %s\n",
+			fw_priv->fw_id);
 		if (timeout != MAX_SCHEDULE_TIMEOUT)
 			mod_timer(&fw_priv->timeout,
 				  round_jiffies_up(jiffies + timeout));
@@ -549,8 +563,15 @@ static int _request_firmware_load(struct
 	del_timer_sync(&fw_priv->timeout);
 
 	mutex_lock(&fw_lock);
-	if (!fw_priv->fw->size || test_bit(FW_STATUS_ABORT, &fw_priv->status))
+	if (test_bit(FW_STATUS_ABORT, &fw_priv->status)) {
+		/* failure has already been logged */
+		retval = -ENOENT;
+	} else if (!fw_priv->fw->size) {
+		dev_err(f_dev->parent,
+			"firmware: agent loaded no data for %s (not found?)\n",
+			name);
 		retval = -ENOENT;
+	}
 	fw_priv->fw = NULL;
 	mutex_unlock(&fw_lock);
 
@@ -601,6 +622,9 @@ request_firmware(const struct firmware *
 	}
 	if (ret)
 		_request_firmware_cleanup(firmware_p);
+	else
+		dev_info(device, "firmware: agent loaded %s into memory\n",
+			 name);
 
 	return ret;
 }
@@ -650,7 +674,7 @@ static void request_firmware_work_func(s
 		ret = _request_firmware_load(fw_priv, fw_work->uevent, timeout);
 		usermodehelper_read_unlock();
 	} else {
-		dev_dbg(fw_work->device, "firmware: %s loading timed out\n",
+		dev_err(fw_work->device, "firmware: %s loading timed out\n",
 			fw_work->name);
 		ret = -EAGAIN;
 	}
